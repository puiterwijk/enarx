name: release

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    - "*"
    tags:
    - "v*.*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-x86_64:
    strategy:
      matrix:
        platform:
        #- host: macos-latest
        #  target: x86_64-apple-darwin
        #  nix: x86_64-darwin
        - host: ubuntu-20.04
          target: x86_64-unknown-linux-musl
          nix: x86_64-linux
    runs-on: ${{ matrix.platform.host }}
    steps:
    - run: cp /usr/bin/ls enarx-${{ matrix.platform.target }}
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}
        path: enarx-${{ matrix.platform.target }}

  build-aarch64:
    strategy:
      matrix:
        platform:
        - host: ubuntu-20.04
          target: aarch64-unknown-linux-musl
        #- host: aarch64-apple-darwin
        #  target: aarch64-apple-darwin
    runs-on: ${{ matrix.platform.host }}
    steps:
      - run: cp /usr/bin/ls enarx-${{ matrix.platform.target }}
      - uses: actions/upload-artifact@v3
        with:
          name: enarx-${{ matrix.platform.target }}
          path: enarx-${{ matrix.platform.target }}

  build-rpm:
    strategy:
      matrix:
        architecture:
        - x86_64
        - aarch64
    needs: [ build-x86_64, build-aarch64 ]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: "enarx-${{ matrix.architecture }}-unknown-linux-musl"
    - run: find
    - id: version
      run: echo "::set-output name=version::$(cargo metadata --format-version=1 --no-deps | jq '.packages[] | select(.name == "enarx") | .version' --raw-output)"
    - run: rpmbuild -bb contrib/enarx.spec --define "%source_binary `pwd`/enarx-${{ matrix.architecture }}-unknown-linux-musl" --define "%source_license `pwd`/LICENSE" --define "%version ${{ steps.version.outputs.version }}" --define "_rpmdir `pwd`" --target "${{ matrix.architecture }}"
    # Test the just-built RPM
    - if: ${{ matrix.architecture.build == 'x86_64' }}
      run: |
        sudo rpm -i "${{ matrix.architecture }}/enarx-${{ steps.version.outputs.version }}-1.${{ matrix.architecture }}.rpm"
        /usr/bin/enarx --version
    - uses: actions/upload-artifact@v3
      with:
        name: "enarx-${{ steps.version.outputs.version }}-1.${{ matrix.architecture }}.rpm"
        path: "${{ matrix.architecture }}/enarx-${{ steps.version.outputs.version }}-1.${{ matrix.architecture }}.rpm"
        if-no-files-found: error

  build-deb:
    strategy:
      matrix:
        architecture:
        - build: x86_64
          debarch: amd64
        - build: aarch64
          debarch: arm64
    needs: [ build-x86_64, build-aarch64 ]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: "enarx-${{ matrix.architecture.build }}-unknown-linux-musl"
    - run: find
    - id: version
      run: echo "::set-output name=version::$(cargo metadata --format-version=1 --no-deps | jq '.packages[] | select(.name == "enarx") | .version' --raw-output)"
    - run: |
        mkdir -p dpkg dpkg/DEBIAN dpkg/usr/bin
        cat contrib/enarx.dpkg | sed -e 's/VERSION/${{ steps.version.outputs.version }}/' -e 's/ARCH/${{ matrix.architecture.debarch }}/' > dpkg/DEBIAN/control
        cp "enarx-${{ matrix.architecture.build }}-unknown-linux-musl" dpkg/usr/bin/enarx
        chmod +x dpkg/usr/bin/enarx
        sudo chown root:root dpkg/usr/bin/enarx
        dpkg-deb --build dpkg
    # Test the just-built deb
    - if: ${{ matrix.architecture.build == 'x86_64' }}
      run: |
        sudo dpkg -i dpkg.deb
        /usr/bin/enarx --version
    - uses: actions/upload-artifact@v3
      with:
        name: "enarx_${{ steps.version.outputs.version }}-1_${{ matrix.architecture.debarch }}.deb"
        path: dpkg.deb
        if-no-files-found: error
