name: release

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    - "*"
    tags:
    - "v*.*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-x86_64:
    strategy:
      matrix:
        platform:
        - host: macos-latest
          target: x86_64-apple-darwin
          nix: x86_64-darwin
        - host: ubuntu-20.04
          target: x86_64-unknown-linux-musl
          nix: x86_64-linux
    runs-on: ${{ matrix.platform.host }}
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v17
    - uses: cachix/cachix-action@v10
      with:
        name: enarx
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Pre-build setup
      run: ${{ matrix.platform.setup }}

    - run: nix build -L ${{ matrix.platform.buildArgs }} '.#packages.${{ matrix.platform.nix }}.enarx-static'
    - run: nix run --inputs-from . 'nixpkgs#coreutils' -- --coreutils-prog=ginstall -p ./result/bin/enarx "enarx-${{ matrix.platform.target }}"
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}
        path: enarx-${{ matrix.platform.target }}

    - run: nix build -L ${{ matrix.platform.buildArgs }} '.#packages.${{ matrix.platform.nix }}.enarx-static-oci'
    - run: nix run --inputs-from . 'nixpkgs#coreutils' -- --coreutils-prog=ginstall -p ./result "enarx-${{ matrix.platform.target }}-oci"
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}-oci
        path: enarx-${{ matrix.platform.target }}-oci

  sign-x86_64:
    needs: [ build-x86_64 ]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl
    - name: Generate the enarx keep signature (no fork)
      if: ${{ !github.event.pull_request.head.repo.fork }}
      env:
        SEV_ID_KEY: ${{ secrets.SEV_ID_KEY }}
        SEV_ID_KEY_SIGNATURE_BLOB: ${{ secrets.SEV_ID_KEY_SIGNATURE_BLOB }}
        SGX_KEY: ${{ secrets.SGX_KEY }}
      run: |
        base64 --decode <<<${SEV_ID_KEY} | gunzip > sev-id.key
        base64 --decode <<<${SEV_ID_KEY_SIGNATURE_BLOB} | gunzip > sev-id-key-signature.blob
        base64 --decode <<<${SGX_KEY} | gunzip > sgx.key
        chmod +x enarx-x86_64-unknown-linux-musl
        ./enarx-x86_64-unknown-linux-musl sign --sgx-key sgx.key --sev-id-key sev-id.key --sev-id-key-signature sev-id-key-signature.blob --out enarx-x86_64-unknown-linux-musl.sig
        rm -f sev-id.key sev-id-key-signature.blob sgx.key
    - name: Generate the enarx keep signature (fork)
      if: ${{ github.event.pull_request.head.repo.fork }}
      run: |
        chmod +x enarx-x86_64-unknown-linux-musl
        ./enarx-x86_64-unknown-linux-musl key sgx create --out sgx.key
        ./enarx-x86_64-unknown-linux-musl key sev create --out sev-author.key
        ./enarx-x86_64-unknown-linux-musl key sev create --out sev-id.key
        ./enarx-x86_64-unknown-linux-musl key sev sign --author-key sev-author.key --id-key sev-id.key --out sev-id-key-signature.blob
        ./enarx-x86_64-unknown-linux-musl sign --sgx-key sgx.key --sev-id-key sev-id.key --sev-id-key-signature sev-id-key-signature.blob --out enarx-x86_64-unknown-linux-musl.sig
        rm -f sgx.key sev-author.key sev-id.key sev-id-key-signature.blob
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl-sig
        path: enarx-x86_64-unknown-linux-musl.sig

  test-bin:
    needs: [ build-x86_64 ]
    strategy:
      matrix:
        platform:
        - host: ubuntu-20.04
          target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.platform.host }}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}
    - run: chmod +x ./enarx-${{ matrix.platform.target }}
    - run: ./enarx-${{ matrix.platform.target }} platform info

  test-oci:
    needs: build-x86_64
    strategy:
      matrix:
        platform:
        - host: ubuntu-20.04
          target: x86_64-unknown-linux-musl

        # TODO: Enable aarch64 and MacOS

    runs-on: ${{ matrix.platform.host }}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}-oci
    - run: docker load < enarx-${{ matrix.platform.target }}-oci
    # TODO: Attempt to run `enarx platform info` within the loaded container

  # TODO: redevelop SBOM generation per issue #1954

  push-oci:
    needs: [ build-x86_64, test-bin, test-oci ]
    permissions:
      packages: write
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - id: version
      run: echo "::set-output name=version::$(cargo metadata --format-version=1 --no-deps | jq '.packages[] | select(.name == "enarx") | .version' --raw-output)"
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl-oci
    - name: create podman multi-arch manifest
      run: |
        podman manifest create --all "ghcr.io/enarx/enarx:v${{ steps.version.outputs.version }}" \
        docker-archive:enarx-x86_64-unknown-linux-musl-oci

    - name: Login to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Login to Docker Hub
      if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
      uses: docker/login-action@v2
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Push to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
      run: podman push "localhost/enarx:v${{ steps.version.outputs.version }}" "ghcr.io/enarx/enarx:v${{ steps.version.outputs.version }}"
    - name: Push to Docker Hub
      if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
      run: podman push "localhost/enarx:v${{ steps.version.outputs.version }}" "docker.io/enarx/enarx:v${{ steps.version.outputs.version }}"
